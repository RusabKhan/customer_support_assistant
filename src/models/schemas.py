import uuid
from datetime import datetime
from uuid import UUID

from pydantic import BaseModel, Field, EmailStr, field_validator
from typing import List, Optional
import re
import enum

from src.models.enums import Role, TicketStatus


class Token(str, enum.Enum):
    """
Enumeration representing different types of authentication tokens.

Attributes:
    access_token: Represents an access token.
    refresh_token: Represents a refresh token.
    bearer: Represents a bearer token type.
"""
    access_token = "access_token"
    refresh_token = "refresh_token"
    bearer = "bearer"


class SignupRequest(BaseModel):
    """
Schema for user signup requests, including email, password, and role.

Validates that the password is at least 6 characters long and contains at least one number.
"""
    email: EmailStr
    password: str
    role: Role

    @field_validator("password")
    def validate_password(cls, value):
        """
        Validates that the password is at least 6 characters long and contains at least one numeric digit.

        Raises:
            ValueError: If the password does not meet the length or numeric requirements.
        """
        if len(value) < 6:
            raise ValueError("Password must be at least 6 characters long")
        if not re.search(r"\d", value):
            raise ValueError("Password must contain at least one number")
        return value

class SignupResponse(BaseModel):
    """
Represents the response returned after a successful user signup.

Attributes:
    email (str): The user's email address.
    role (Role): The assigned role of the user.
    created_at (datetime): The timestamp when the user was created.
"""
    email: str
    role: Role
    created_at: datetime

    class Config:
        orm_mode = True

class TokenResponse(BaseModel):
    """
Represents a response model for authentication tokens, including token details, expiration, creation, revocation, and type information.

Attributes:
    id (UUID): Unique identifier for the token.
    user_id (UUID): Identifier of the associated user.
    token (str): The authentication token string.
    expires_at (datetime): Expiration timestamp of the token.
    created_at (datetime): Creation timestamp of the token.
    revoked_at (Optional[datetime]): Timestamp when the token was revoked, if applicable.
    token_type (str): Type of the token, defaults to "bearer".
"""
    id: UUID
    user_id: UUID
    token: str
    expires_at: datetime
    created_at: datetime
    revoked_at: Optional[datetime] = None
    token_type: str = "bearer"

    class Config:
        orm_mode = True


class TicketCreate(BaseModel):
    """
Schema for creating a new ticket, including title and content fields.
"""
    title: str = Field(..., max_length=100)
    content: str


class TicketResponse(BaseModel):
    """
Represents a response model for a ticket, including its ID, title, content, and current status.
"""

    id: uuid.UUID
    title: str
    content: str
    status: TicketStatus


class TicketWithMessages(BaseModel):
    """
Represents a support ticket with its details and associated messages.

Attributes:
    id (uuid.UUID): Unique identifier for the ticket.
    title (str): Title of the ticket.
    content (str): Main content or description of the ticket.
    messages (List[str]): List of messages related to the ticket.
"""
    id: uuid.UUID
    title: str
    content: str
    messages: List[str]


class MessageCreate(BaseModel):
    """
Schema for creating a new message, including content and AI indicator.

Attributes:
    content (str): The message text.
    is_ai (bool): Flag indicating if the message was generated by AI.
"""
    content: str
    is_ai: bool
